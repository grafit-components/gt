@use 'sass:map';
@use './color.scss';
@use 'util/input-util.scss';
@use 'util/font-util.scss';
@use 'util/scrollbar-util.scss';
@use 'vars';
@use 'font';
@use 'color/work/color' as work-color;

.control {
  &__label {
    display: flex;
    width: 100%;
    flex-direction: column;
    color: map.get(color.$blocks, 'work', 'default.color');

    &-delimiter {
      position: relative;
      padding-right: vars.$space-4;

      &:after {
        position: absolute;
        top: 50%;
        right: 0;
        content: '';
        margin: 0 vars.$space-1;
        width: vars.$space-2;
        height: map.get(vars.$borderSize, '1px');
        background-color: map.get(color.$blocks, 'work', 'default', 'border-color');
      }
    }

    &_inline {
      flex-direction: row;
      align-items: center;
    }

    &__text {
      margin-top: vars.$space-1;
      margin-bottom: vars.$space-1;
      margin-right: vars.$space-2;
      flex-shrink: 0;
      color: map.get(color.$blocks, 'work', 'default', 'color');
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      @include font-util.fontHelper(font.$font-title3);
    }
  }
}

@each $blockName, $blockItem in color.$blocks {
  .block-#{$blockName} {
    @include input-util.control($blockItem);
  }
}

.input {
  position: relative;

  &__icon {
    height: vars.$space-8;
    width: vars.$space-8;
    line-height: vars.$space-8 !important;
    text-align: center;
    color: map.get(color.$blocks, 'work', 'default', 'color');

    &-left {
      position: absolute;
      top: 0;
      left: 0;
    }

    &-right {
      position: absolute;
      top: 0;
      right: 0;

      &:hover {
        cursor: pointer;
      }
    }
  }

  &__field {
    display: inline-flex;
    flex-grow: 1;
    align-items: center;
    padding: 0 vars.$space-3 0 vars.$space-3;
    min-height: vars.$space-8;
    line-height: vars.$space-8;
    width: 100%;
    @include font-util.fontHelper(font.$font-body3);
    @include input-util.inputField(map.get(color.$blocks, 'work'));

    &_error {
      border-color: map.get(work-color.$work, 'error', 'border-color');
    }

    &_warning {
      border-color: map.get(work-color.$work, 'warning', 'border-color');
    }

    &::placeholder {
      color: map.get(work-color.$work, 'default', 'color');
    }

    &_textarea {
      height: 100%;
      resize: none;
      padding: vars.$space-2 vars.$space-3;
      @include scrollbar-util.scrollbarBasis();
      @include scrollbar-util.scrollbarHidden();
    }

    &_icon_left {
      padding-left: vars.$space-8;
    }

    &_icon_right {
      padding-right: vars.$space-8;
    }

    &::placeholder,
    &[disabled] {
      opacity: 0.5;
    }
  }

  &_required {
    &:after {
      content: '*';
      position: absolute;
      bottom: 100%;
      right: vars.$space-1;
      color: map.get(color.$blocks, 'work', 'error', 'color');
      display: block;
      font-size: 1.6rem;
    }
  }

  &_optional {
    &:after {
      content: '*';
      position: absolute;
      bottom: 100%;
      right: vars.$space-1;
      color: map.get(color.$blocks, 'work', 'success', 'color');
      display: block;
      font-size: 1.6rem;
    }
  }

  &__helper {
    font-size: vars.$font-size-overline;
    color: map.get(color.$blocks, 'work', 'default', 'color');
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
}

@each $blockName, $blockItem in color.$blocks {
  .block-#{$blockName} {
    @include input-util.input($blockItem);
  }
}

.file-upload {
  display: flex;
  border: dashed 3px map.get(color.$blocks, 'work', 'default', 'border-color');

  &-button {
    position: relative;
  }

  &__label {
    flex-grow: 1;
    position: relative;
    display: flex;
    justify-content: center;
  }

  &__input {
    opacity: 0;
    display: block;
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
  }

  &__content {
    flex-grow: 1;
    display: flex;
  }
}
