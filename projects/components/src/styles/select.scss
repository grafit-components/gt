@use 'sass:map';
@use './color.scss';
@use 'vars';
@use 'util/list-util.scss';
@use 'util/input-util.scss';
@use 'util/state-util.scss';
@use 'util/shape-util.scss';
@use 'util/shadow-util.scss';
@use 'util/select-util.scss';

.select {
  position: relative;
  display: inline-flex;
  flex-basis: 150px;
  width: 150px;
  min-width: 0;
  flex-grow: 1;
  min-height: vars.$space-8;
  line-height: vars.$space-8;

  &_disabled,
  &[disabled] {
    opacity: 0.6;
  }

  &_multiple {
    min-height: vars.$space-8;
    height: auto;
  }

  &_placeholder {
    opacity: 0.5;
    min-height: vars.$space-8;
  }

  &:hover {
    cursor: pointer;
  }

  &__head {
    position: relative;
    display: flex;
    align-items: center;
    padding: 0 vars.$space-3;
    font-size: 1.4rem;
    flex-grow: 1;
    min-height: 3.2rem;
    min-width: 0;
    overflow-x: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    @include select-util.selectBlock(map.get(color.$blocks, 'work'));

    &-clear {
      padding-right: vars.$space-8;
    }

    &::-webkit-scrollbar {
      display: none;
    }

    &__text {
      flex-grow: 0;
      min-width: 0;
      overflow: hidden;
      text-overflow: ellipsis;
    }
  }

  &__icon {
    position: absolute;
    right: vars.$space-1;
    top: 50%;
    margin-top: -0.8rem;

    &-delete {
      right: 1.3em;
    }
  }

  &__values {
    display: flex;
    flex-direction: column;
    width: 100%;

    &__title {
      margin: vars.$space-1 0;
      color: map.get(color.$blocks, 'work', 'secondary', 'color');
    }

    &__list {
      display: flex;
      flex-wrap: wrap;
      overflow: hidden;

      & > div {
        flex-shrink: 1;
      }
    }
  }
}

itsk-select.ng-invalid .select__head {
  border-color: map.get(color.$blocks, 'work', 'error', 'color');
}

@each $blockName, $blockItem in color.$blocks {
  .block-#{$blockName} {
    &.select,
    & .select {
      &__head {
        @include select-util.selectBlock($blockItem);
      }

      &__values {
        &__title {
          color: map.get($blockItem, 'secondary', 'color');
        }
      }
    }

    & itsk-select.ng-invalid .select__head {
      border-color: map.get($blockItem, 'error', 'color');
    }
  }
}

.options {
  @include shape-util.baseBorder(map.get(color.$blocks, 'work', 'default'));
  @include shadow-util.shadow-b(vars.$shadow-1);
  @include list-util.listDefault();
  @include list-util.listBlock(map.get(color.$blocks, 'work'));
}

@each $blockName, $blockItem in color.$blocks {
  .block-#{$blockName} {
    &.options,
    & .options {
      @include list-util.listBlock($blockItem);
    }
  }
}

select {
  padding: 0 vars.$space-3;
  min-height: vars.$space-8;
  line-height: vars.$space-8;
  font-size: 1.4rem;
  @include select-util.selectBlock(map.get(color.$blocks, 'work'));

  &:hover {
    cursor: pointer;
  }
}

@each $blockName, $blockItem in color.$blocks {
  select.block-#{$blockName},
  .block-#{$blockName}__select,
  .block-#{$blockName} select {
    @include select-util.selectBlock($blockItem);
  }
}

option {
  position: absolute;
  z-index: 1;
  min-width: 100%;
  @include list-util.listDefault();
  @include list-util.listBlock(map.get(color.$blocks, 'work'));
}

@each $blockName, $blockItem in color.$blocks {
  option.block-#{$blockName},
  .block-#{$blockName}__option,
  .block-#{$blockName} option {
    @include list-util.listBlock($blockItem);
  }
}
